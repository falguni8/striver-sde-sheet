class Solution {
public:
    int merge(vector<int>& nums, int l, int mid, int h) {
        int lt = l;
        int r = mid + 1;
        vector<int> t;
        int c = 0;

        while (lt <= mid && r <= h) {
            if ((long long)nums[lt] > 2LL * nums[r]) {
                c += mid - lt + 1;
                r++;
            }
            else {
                lt++;
            }
        }

        lt = l;
        r = mid + 1;

        while (lt <= mid && r <= h) {
            if (nums[lt] <= nums[r]) {
                t.push_back(nums[lt]);
                lt++;
            }
            else {
                t.push_back(nums[r]);
                r++;
            }
        }

        while (lt <= mid) {
            t.push_back(nums[lt]);
            lt++;
        }

        while (r <= h) {
            t.push_back(nums[r]);
            r++;
        }

        for (int i = l; i <= h; i++) {
            nums[i] = t[i - l];
        }

        return c;
    }

    int mergeSort(int l, int h, vector<int>& nums) {
        if (l >= h) {
            return 0;
        }

        int mid = l + (h - l) / 2;
        int c = 0;

        c += mergeSort(l, mid, nums);
        c += mergeSort(mid + 1, h, nums);
        c += merge(nums, l, mid, h);

        return c;
    }

    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        return mergeSort(0, n - 1, nums);
    }
};
